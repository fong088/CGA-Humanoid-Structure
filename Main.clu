/*
* ---- MAIN ----
*
* This program tries to replicate a human figure for it to animate or articulate freely.
*
* It has two modes:
*
* FREE MODE:
* In this mode we are able to articulate the figure freely, achieved by using
* sliders. We have every DOA required for each joint.
*
* ANIMATION MODE:
* The user must provide a "data.dat" in the script's directory, which will have the data
* in a specific order which is provided in the README.txt file. When the CheckBox
* is ticked, the animation will start playing in a loop until the user unticks it.
*
**/

DefVarsN3();
DrawFrame(0.5, "axes");

/// --- Kinematic Parameters ---
scale   = 0.004;   // Uniform scale of the model for both modes
HEAD    = 150 * scale;     // NECK TO HEAD 
BACK    = 330.4 * scale;   // LLJ_LNJ
SHOULDER= 176.3 * scale;   // Shoulder offset
ARM     = 239.3 * scale;   // Shoulder to Elbow
FOREARM = 250 * scale;     // Elbow to wrist
GROIN   = 119.5 * scale;   // Lower backbone
WAIST   = 211.6 * scale;   // Waist (hip separation)
KNEE    = 380.6 * scale;   // Thigh
AUX_KNEE= 21.2 * scale;
SHIN    = 358.6 * scale;   // Shin
AUX_SHIN= 3.7 * scale;

JOINT_RADIUS   = 20 * scale;
CILINDER_RADIUS= JOINT_RADIUS/2;

/// Drawing functions 
Cilindro={A=_P(1);B=_P(2);r=_P(3);E=einf^e0;Ae=(A^E)*E;Be=(B^E)*E;Ce=Be-Ae;C=Ce+1/2*Ce^^2*einf+e0;DrawCylinder(A,C,r);}
Cajita={C=_P(1);X=_P(2);Y=_P(3);Z=_P(4);E=einf^e0;D1e=((X-C)^E)*E;D2e=((Y-C)^E)*E;D3e=((Z-C)^E)*E;D1=D1e+1/2*D1e^^2*einf+e0;D2=D2e+1/2*D2e^^2*einf+e0;D3=D3e+1/2*D3e^^2*einf+e0;DrawBox(C,D1,D2,D3);}

/// --- MODE SWITCH ---
check = CheckBox("Animar",0);
EnableAnimate(check);

/// --- Animation Data ---
if (ExecMode & !EM_ANIMATE)   
{
    data = ReadData("datos.dat");
    i = Size(data);
}

/// --- Variables for both modes ---
globalX=0;globalY=0;globalZ=0;
globalRx=0;globalRy=0;globalRz=0;
LLJ_xr=0;LLJ_zr=0;
LNJ_xr=0;LNJ_yr=0;
SJL_xr=0;SJL_yr=0;SJL_zr=0;
SJR_xr=0;SJR_yr=0;SJR_zr=0;
EJL_xr=0;EJR_xr=0;
HJL_xr=0;HJL_yr=0;HJL_zr=0;
KJL_xr=0;
AJL_xr=0;AJL_yr=0;AJL_zr=0;
HJR_xr=0;HJR_yr=0;HJR_zr=0;
KJR_xr=0;
AJR_xr=0;AJR_yr=0;AJR_zr=0;

if(check)
{
    t = round(150*Time,0)%(i-1) + 1;
    vals = data(t);

    globalX  = vals(1);
    globalY  = vals(2);
    globalZ  = vals(3);
    globalRx = vals(4);
    globalRy = vals(5);
    globalRz = vals(6);

    LLJ_xr = vals(7);
    LLJ_zr = vals(8);

    LNJ_xr = vals(9);
    LNJ_yr = vals(10);

    SJL_xr = vals(11);
    SJL_yr = vals(12);
    SJL_zr = vals(13);

    EJL_xr = vals(14);

    SJR_xr = vals(15);
    SJR_yr = vals(16);
    SJR_zr = vals(17);

    EJR_xr = vals(18);

    HJL_xr = vals(19);
    HJL_yr = vals(20);
    HJL_zr = vals(21);

    KJL_xr = vals(22);

    AJL_xr = vals(23);
    AJL_yr = vals(24);
    AJL_zr = vals(25);

    HJR_xr = vals(26);
    HJR_yr = vals(27);
    HJR_zr = vals(28);

    KJR_xr = vals(29);

    AJR_xr = vals(30);
    AJR_yr = vals(31);
    AJR_zr = vals(32);
}
else
{
    // Show sliders for all parameters
    globalX  = Slider("Global X",-5,5,0.1,0); 
    globalY  = Slider("Global Y",-5,5,0.1,0);
    globalZ  = Slider("Global Z",-15,5,0.1,0);
    globalRx = Slider("Global RX",-Pi,Pi,0.1,0);
    globalRy = Slider("Global RY",-Pi,Pi,0.1,0);
    globalRz = Slider("Global RZ",-Pi,Pi,0.1,0);

    LLJ_xr   = Slider("LLJ xr",-Pi,Pi,0.1,0);
    LLJ_zr   = Slider("LLJ zr",-Pi,Pi,0.1,0);

    LNJ_xr   = Slider("LNJ xr",-Pi,Pi,0.1,0);
    LNJ_yr   = Slider("LNJ yr",-Pi,Pi,0.1,0);

    SJL_xr   = Slider("SJL xr",-Pi,Pi,0.1,0);
    SJL_yr   = Slider("SJL yr",-Pi,Pi,0.1,0);
    SJL_zr   = Slider("SJL zr",-Pi,Pi,0.1,0.005);

    EJL_xr   = Slider("EJL xr",-Pi,Pi,0.1,-0.3);

    SJR_xr   = Slider("SJR xr",-Pi,Pi,0.1,0);
    SJR_yr   = Slider("SJR yr",-Pi,Pi,0.1,0);
    SJR_zr   = Slider("SJR zr",-Pi,Pi,0.1,0);

    EJR_xr   = Slider("EJR xr",-Pi,Pi,0.1,-0.3);

    HJL_xr   = Slider("HJL xr",-Pi,Pi,0.1,0);
    HJL_yr   = Slider("HJL yr",-Pi,Pi,0.1,0);
    HJL_zr   = Slider("HJL zr",-Pi,Pi,0.1,-0.1);

    KJL_xr   = Slider("KJL xr",-Pi,Pi,0.1,0);

    AJL_xr   = Slider("AJL xr",-Pi,Pi,0.1,0);
    AJL_yr   = Slider("AJL yr",-Pi,Pi,0.1,0);
    AJL_zr   = Slider("AJL zr",-Pi,Pi,0.1,0);

    HJR_xr   = Slider("HJR xr",-Pi,Pi,0.1,0);
    HJR_yr   = Slider("HJR yr",-Pi,Pi,0.1,0);
    HJR_zr   = Slider("HJR zr",-Pi,Pi,0.1,0.1);

    KJR_xr   = Slider("KJR xr",-Pi,Pi,0.1,0);

    AJR_xr   = Slider("AJR xr",-Pi,Pi,0.1,0);
    AJR_yr   = Slider("AJR yr",-Pi,Pi,0.1,0);
    AJR_zr   = Slider("AJR zr",-Pi,Pi,0.1,0);
}

// Global motor:
M_GLOBAL = TranslatorN3(globalX,globalY,globalZ)
         *RotorN3(1,0,0,globalRx)
         *RotorN3(0,1,0,globalRy)
         *RotorN3(0,0,1,globalRz);

:IPNS;
O = M_GLOBAL*e0*(~M_GLOBAL) ; // Origin of the system

// Lower Lumbar Joint (LLJ)
R_LLJ = RotorN3(1,0,0,LLJ_xr)*RotorN3(0,0,1,LLJ_zr);
M_LLJ = R_LLJ;
MLLJ = M_GLOBAL*M_LLJ;
P_LLJ = MLLJ*e0*(~MLLJ);

// "Upper Aux" (to LNJ and Shoulders)
T_UAUX = TranslatorN3(0,BACK,0);
M_UAUX = T_UAUX; 
M_UAUX = MLLJ*M_UAUX;
P_UAUX = M_UAUX*e0*(~M_UAUX);

// Clavicle/Neck Joint (LNJ)
T_LNJ = TranslatorN3(0,HEAD,0);
R_LNJ = RotorN3(1,0,0,LNJ_xr)*RotorN3(0,1,0,LNJ_yr);
M_LNJ = T_LNJ*R_LNJ;
MLNJ = M_UAUX*M_LNJ;
P_LNJ = MLNJ*e0*(~MLNJ);

// Right Shoulder (SJR)
T_SJR = TranslatorN3(-SHOULDER, -30*scale,0);
R_SJR = RotorN3(1,0,0,SJR_xr)*RotorN3(0,1,0,SJR_yr)*RotorN3(0,0,1,SJR_zr);
M_SJR = T_SJR*R_SJR;
MSJR = M_UAUX*M_SJR;
P_SJR = MSJR*e0*(~MSJR);

// Left Shoulder (SJL)
T_SJL = TranslatorN3(SHOULDER, -30*scale,0);
R_SJL = RotorN3(1,0,0,SJL_xr)*RotorN3(0,1,0,SJL_yr)*RotorN3(0,0,1,SJL_zr);
M_SJL = T_SJL*R_SJL;
MSJL = M_UAUX*M_SJL;
P_SJL = MSJL*e0*(~MSJL);

// Right Elbow (EJR)
T_EJR = TranslatorN3(-30*scale, -ARM,0);
R_EJR = RotorN3(1,0,0,EJR_xr);
M_EJR = T_EJR*R_EJR;
MEJR = MSJR*M_EJR;
P_EJR = MEJR*e0*(~MEJR);

// Left Elbow (EJL)
T_EJL = TranslatorN3(30*scale, -ARM,0);
R_EJL = RotorN3(1,0,0,EJL_xr);
M_EJL = T_EJL*R_EJL;
MEJL = MSJL*M_EJL;
P_EJL = MEJL*e0*(~MEJL);

// Right Wrist (WR)
T_WR = TranslatorN3(-60*scale,-FOREARM,0);
M_WR = T_WR;
MWR = MEJR*M_WR;
P_WR = MWR*e0*(~MWR);

// Left Wrist (WL)
T_WL = TranslatorN3(60*scale,-FOREARM,0);
M_WL = T_WL;
MWL = MEJL*M_WL;
P_WL = MWL*e0*(~MWL);

// --- LOWER BODY ---

// "Lower Aux" (move from LLJ to groin for hips)
T_LAUX = TranslatorN3(0,-GROIN,0);
M_LAUX = T_LAUX;
MLAUX = M_GLOBAL*M_LAUX;
P_LAUX = MLAUX*e0*(~MLAUX);

// Right Hip Joint (HJR)
T_HJR = TranslatorN3(-(WAIST/2), 0,0);
R_HJR = RotorN3(1,0,0,HJR_xr)*RotorN3(0,1,0,HJR_yr)*RotorN3(0,0,1,HJR_zr);
M_HJR = T_HJR*R_HJR;
MHJR = MLAUX*M_HJR;
P_HJR = MHJR*e0*(~MHJR);

// Left Hip Joint (HJL)
T_HJL = TranslatorN3(WAIST/2, 0,0);
R_HJL = RotorN3(1,0,0,HJL_xr)*RotorN3(0,1,0,HJL_yr)*RotorN3(0,0,1,HJL_zr);
M_HJL = T_HJL*R_HJL;
MHJL = MLAUX*M_HJL;
P_HJL = MHJL*e0*(~MHJL);

// Right Knee (KJR)
T_KJR = TranslatorN3(-AUX_KNEE,-KNEE,0);
R_KJR = RotorN3(1,0,0,KJR_xr);
M_KJR = T_KJR*R_KJR;
MKJR = MHJR*M_KJR;
P_KJR = MKJR*e0*(~MKJR);

// Left Knee (KJL)
T_KJL = TranslatorN3(AUX_KNEE,-KNEE,0);
R_KJL = RotorN3(1,0,0,KJL_xr);
M_KJL = T_KJL*R_KJL;
MKJL = MHJL*M_KJL;
P_KJL = MKJL*e0*(~MKJL);

// Right Ankle (AJR)
T_AJR = TranslatorN3(-AUX_SHIN,-SHIN,0);
R_AJR = RotorN3(1,0,0,AJR_xr)*RotorN3(0,1,0,AJR_yr)*RotorN3(0,0,1,AJR_zr);
M_AJR = T_AJR*R_AJR;
MAJR = MKJR*M_AJR;
P_AJR = MAJR*e0*(~MAJR);

// Left Ankle (AJL)
T_AJL = TranslatorN3(AUX_SHIN,-SHIN,0);
R_AJL = RotorN3(1,0,0,AJL_xr)*RotorN3(0,1,0,AJL_yr)*RotorN3(0,0,1,AJL_zr);
M_AJL = T_AJL*R_AJL;
MAJL = MKJL*M_AJL;
P_AJL = MAJL*e0*(~MAJL);

// --- DRAW THE JOINT SPHERES ---
DrawSphereJoint = { P = _P(1); JOINT_RADIUS = _P(2); :White; :P - 1/2*JOINT_RADIUS^^2*einf; }

::DrawSphereJoint(P_LLJ,JOINT_RADIUS);
::DrawSphereJoint(P_UAUX,JOINT_RADIUS);
::DrawSphereJoint(P_LNJ,JOINT_RADIUS);
::DrawSphereJoint(P_SJR,JOINT_RADIUS);
::DrawSphereJoint(P_SJL,JOINT_RADIUS);
::DrawSphereJoint(P_EJR,JOINT_RADIUS);
::DrawSphereJoint(P_EJL,JOINT_RADIUS);
::DrawSphereJoint(P_WR,JOINT_RADIUS);
::DrawSphereJoint(P_WL,JOINT_RADIUS);
::DrawSphereJoint(P_HJR,JOINT_RADIUS);
::DrawSphereJoint(P_HJL,JOINT_RADIUS);
::DrawSphereJoint(P_KJR,JOINT_RADIUS);
::DrawSphereJoint(P_KJL,JOINT_RADIUS);
::DrawSphereJoint(P_AJR,JOINT_RADIUS);
::DrawSphereJoint(P_AJL,JOINT_RADIUS);


// --- DRAW THE CYLINDERS (LIMBS) ---
DrawLimb = { A=_P(1); B=_P(2); CILINDER_RADIUS=_P(3);:Yellow; ::Cilindro(A, B, CILINDER_RADIUS); }

::DrawLimb(P_LLJ, P_UAUX,CILINDER_RADIUS);
::DrawLimb(P_UAUX, P_LNJ,CILINDER_RADIUS);
::DrawLimb(P_UAUX, P_SJR,CILINDER_RADIUS);
::DrawLimb(P_UAUX, P_SJL,CILINDER_RADIUS);
::DrawLimb(P_SJR, P_EJR,CILINDER_RADIUS);
::DrawLimb(P_SJL, P_EJL,CILINDER_RADIUS);
::DrawLimb(P_EJR, P_WR,CILINDER_RADIUS);
::DrawLimb(P_EJL, P_WL,CILINDER_RADIUS);

// Lower limbs
::DrawLimb(P_LLJ, P_HJR,CILINDER_RADIUS);
::DrawLimb(P_LLJ, P_HJL,CILINDER_RADIUS);
::DrawLimb(P_HJR, P_KJR,CILINDER_RADIUS);
::DrawLimb(P_HJL, P_KJL,CILINDER_RADIUS);
::DrawLimb(P_KJR, P_AJR,CILINDER_RADIUS);
::DrawLimb(P_KJL, P_AJL,CILINDER_RADIUS);

// --- HANDS AND FEET ---
// Crear funcion con la escructura
DrawHandFootBox = {
    C=_P(1); M=_P(2); x=_P(3); y=_P(4); z=_P(5);
    :Color(1, 1, 0.6, .95);
    Px = M * VecN3(x, 0, 0) * (~M);
    Py = M * VecN3(0, y, 0) * (~M);
    Pz = M * VecN3(0, 0, z) * (~M);
    ::Cajita(C, Px, Py, Pz);
}

::DrawHandFootBox(P_WR, MWR, 50*scale, 100*scale, 50*scale); // Right Hand
::DrawHandFootBox(P_WL, MWL, 50*scale, 100*scale, 50*scale); // Left Hand
::DrawHandFootBox(P_AJR, MAJR, 70*scale, 70*scale, 150*scale); // Right Foot
::DrawHandFootBox(P_AJL, MAJL, 70*scale, 70*scale, 150*scale); // Left Foot

// Head 
DrawHeadBox = {
    C=_P(1); M=_P(2); x=_P(3); y=_P(4); z=_P(5);
    Px = M * VecN3(x, 0, 0) * (~M);
    Py = M * VecN3(0, y, 0) * (~M);
    Pz = M * VecN3(0, 0, z) * (~M);
    ::Cajita(C, Px, Py, Pz);
}

::DrawHeadBox(P_LNJ, MLNJ, 200*scale, 200*scale, 200*scale);

// ---- End of Drawing ----